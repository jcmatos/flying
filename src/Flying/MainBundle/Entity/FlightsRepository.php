<?php

namespace Flying\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FlightsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FlightsRepository extends EntityRepository
{

    public function getNewestFlight($origin, $destination)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FlyingMainBundle:Flights p
                 WHERE p.active = 1 AND
                 p.origin = :origin AND
                 p.destination = :destination
                 ORDER BY p.date DESC'
            )->setParameters(array('origin' => $origin, 'destination' => $destination));

        try {
            $result = $query->getResult();
            if (!empty($result)) return $result[0];
            else return "";
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }


    public function getLastFlight()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FlyingMainBundle:Flights p
                 WHERE p.active = 1
                 ORDER BY p.lastUpdated ASC'
            );

        try {
            $result = $query->getResult();
            return $result[0];
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getLastExistingFlight($begining_date, $range_from, $range_to)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FlyingMainBundle:Flights p
                 WHERE p.lastUpdated > :begining_date AND
                 p.date >= :range_from AND
                 p.date <= :range_to AND
                 p.active = 1
                 ORDER BY p.lastUpdated ASC'
            )->setParameters(array('begining_date' => $begining_date, 'range_from' => $range_from, 'range_to' => $range_to));
        try {
            $result = $query->getResult();
            if (!empty($result)) return $result[0];
            else return "";
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }




/*
    public function getFlightBelowPrice($price)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FlyingMainBundle:Flights p
                 WHERE p.price < :price AND p.price > 0'
            )->setParameter('price', $price);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }
*/
    public function getAllExistingFlights()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FlyingMainBundle:Flights p
                 WHERE p.price > 0 AND p.flightNumber != :na AND p.active = 1'
            )->setParameter('na', 'NA');

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    // voos que tenham ja preco e que nao foram anulados (flight number NA)
    public function getFlightsCustom($start_date, $end_date, $origin, $destination)
    {
        /*
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FlyingMainBundle:Flights p
                 WHERE p.active = 1
                 AND p.date >= :start_date AND p.date <= :end_date
                 AND p.origin = :origin AND p.destination = :destination'
            )->setParameters(array('start_date' => $start_date, 'end_date' => $end_date, 'origin' => $origin, 'destination' => $destination));
            */
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FlyingMainBundle:Flights p
                 WHERE p.price > 0 AND p.flightNumber != :na
                 AND p.active = 1
                 AND p.date >= :start_date AND p.date <= :end_date
                 AND p.origin = :origin AND p.destination = :destination'
            )->setParameters(array('na' => 'NA', 'start_date' => $start_date, 'end_date' => $end_date, 'origin' => $origin, 'destination' => $destination));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

    // todos os voos (inclusive anulados e sem preco), mas so activos
    public function getFlightsCustomAll($start_date, $end_date, $origin, $destination, $update_date_only)
    {
        
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM FlyingMainBundle:Flights p
                 WHERE p.active = 1
                 AND p.date >= :start_date AND p.date <= :end_date
                 AND p.origin = :origin AND p.destination = :destination
                 AND p.lastUpdated <= :update_date_only'
            )->setParameters(array('start_date' => $start_date, 'end_date' => $end_date, 'origin' => $origin, 'destination' => $destination, 'update_date_only' => $update_date_only));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

}
